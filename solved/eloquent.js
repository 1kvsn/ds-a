// Make ChessBoard (eloquent lesson 2)

function printChessboard(size) {
	let line = " ";
	// handles the line
	for(let counterOne = 1; counterOne<=size; counterOne = counterOne + 1) {
			
			// handles the characters on a line.
			for(let counterTwo = 1; counterTwo<=size; counterTwo = counterTwo + 1) {
					if((counterOne + counterTwo) % 2 === 0) {
							line = line + "#"
					} else {
							line = line + " ";
					}
			}
			// once a line is built, changes into new line
			line = line + "\n";
	}
	console.log(line)
}

printChessboard(8)

// ---------------------------------------------------------

// Make range function (eloquent)
function range(start, end, step = start <= end ? 1 : -1) {
	let result = [];

	for(let number = start; step >= 0 ? number <= end : number >= end; number = number + step) {
			result.push(number)
			
	}
	return result;
}

range(10, 1, -3) // [ 10, 7, 4, 1 ]

// -------------------------------------------------------

// Reverse an array in-place
function reverseArrayInPlace(array) {

	let len = array.length;

	for (let i = 0; i < Math.floor(len/2); i++) {
			let swap = array[i];
			array[i] = array[len-1-i];
			array[len-1-i] = swap;
	}
	return array;
}

reverseArrayInPlace([ 10, 7, 4, 1, 5 ]);

// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
// ------------------------------------------------------
